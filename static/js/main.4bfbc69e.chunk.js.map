{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerOneMinutes","playerOneSeconds","playerTwoMinutes","playerTwoSeconds","turn","disableOne","disableTwo","gameOn","endGame","buttonText","buttonType","intervalId","NaN","updateGameTimeMinutes","bind","assertThisInitialized","updateGameTimeSeconds","startTurn","tick","reset","clearInterval","setState","player","myInterval","setInterval","timer","newSeconds","newMinutes","console","log","e","parseInt","target","value","react_default","a","createElement","className","Container","maxWidth","Grid","container","spacing","item","xs","Paper","SetTime","title","minutes","seconds","onChangeMinutes","onChangeSeconds","App_Clock","name","disabledToggle","Box","p","Button","variant","color","onClick","React","Component","Clock","_this2","Typography","slice","disabled","component","Input","type","placeholder","toString","onChange","inputProps","min","step","max","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bfbc69e.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'; \nimport Container from '@material-ui/core/Container'   \nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\n\n\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      playerOneMinutes: 0,\n      playerOneSeconds: 0,\n      playerTwoMinutes: 0,\n      playerTwoSeconds: 0,\n      turn: '',\n      disableOne: false,\n      disableTwo: false,\n      gameOn: false,\n      endGame: false,\n      buttonText: 'Start Game',\n      buttonType: 'default',\n      intervalId: NaN,\n      \n    };\n    this.updateGameTimeMinutes = this.updateGameTimeMinutes.bind(this);\n    this.updateGameTimeSeconds = this.updateGameTimeSeconds.bind(this);\n    this.startTurn = this.startTurn.bind(this);\n    this.tick = this.tick.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  // componentDidUpdate(){\n  //   // console.log('Updated with:');\n  //   // console.log(this.state);\n  // }\n  reset(){\n    clearInterval(this.state.intervalId);\n    this.setState({\n      playerOneMinutes: 0,\n      playerOneSeconds: 0,\n      playerTwoMinutes: 0,\n      playerTwoSeconds: 0,\n      turn: '',\n      disableOne: false,\n      disableTwo: false,\n      gameOn: false,\n      endGame: false,\n      buttonText: 'Start Game',\n      buttonType: 'default',\n      intervalId: NaN,\n      \n\n    })\n  }\n  startTurn(player){\n    if(!this.state.gameOn){\n      let myInterval = setInterval(this.tick,1000)\n      \n      this.setState({\n        gameOn:true,\n        buttonText: 'End Turn',\n        buttonType: 'primary',\n        turn: player,\n        intervalId: myInterval\n      })\n      if(player === 'Player 1'){\n        this.setState({\n          disableOne:true,\n          turn: 'Player 2'\n        })\n      \n      }\n      else{\n        this.setState({\n          disableTwo: true,\n          turn: 'Player 1',\n        })\n      }\n      \n      \n    }\n    else if(this.state.gameOn){\n      if(player === 'Player 1'){\n        this.setState({\n          disableOne: true,\n          disableTwo: false,\n          turn: 'Player 2',\n        })\n      } \n      else{\n        this.setState({\n          disableOne: false,\n          disableTwo: true,\n          turn: 'Player 1',\n        })\n      }\n      }\n\n  }\n\n  tick(timer){\n    if (this.state.gameOn){\n      if (this.state.turn === 'Player 1'){\n          var newSeconds = this.state.playerOneSeconds;\n          var newMinutes = this.state.playerOneMinutes;\n          \n  \n          if (newSeconds>0){\n            newSeconds--;\n            \n            }\n          else if (newSeconds===0){\n            if(newMinutes === 0){\n              console.log('Game Over');\n              this.setState({\n                gameOn: false,\n                endGame: true,\n                disableOne: true, \n                disableTwo: true,\n              })\n            }\n            else{\n              newMinutes--;\n              newSeconds = 59;\n            }\n          }\n          \n          this.setState({\n            playerOneMinutes: newMinutes,\n            playerOneSeconds: newSeconds,\n          })\n      }\n      else if(this.state.turn === 'Player 2'){\n        var newSeconds = this.state.playerTwoSeconds;\n        var newMinutes = this.state.playerTwoMinutes;\n\n        if (newSeconds>0){\n          newSeconds--;\n          \n          }\n        else if (newSeconds===0){\n          if(newMinutes === 0){\n            \n           this.setState({\n              gameOn: false,\n              endGame: true,\n              disableOne: true, \n              disableTwo: true,\n            });\n            console.log('Game Over');\n            \n          }\n          else{\n            newMinutes--;\n            newSeconds = 59;\n          }\n        }\n        \n        this.setState({\n          playerTwoMinutes: newMinutes,\n          playerTwoSeconds: newSeconds,\n        })\n      } \n  }}\n\n  updateGameTimeMinutes(e){\n    var newMinutes = parseInt(e.target.value);\n\n    this.setState({\n      playerOneMinutes: newMinutes,\n      playerOneSeconds: this.state.playerOneSeconds,\n      playerTwoMinutes: newMinutes,\n      playerTwoSeconds: this.state.playerTwoSeconds,\n      turn: this.state.turn,\n\n    })\n  };\n  updateGameTimeSeconds(e){\n    this.setState({\n      playerOneMinutes: this.state.playerOneMinutes,\n      playerOneSeconds: parseInt(e.target.value),\n      playerTwoMinutes: this.state.playerTwoMinutes,\n      playerTwoSeconds: parseInt(e.target.value),\n      turn: this.state.turn,\n\n    })\n  }\n  render(){\n    if (!this.state.endGame){\n      return (\n        <div className=\"App\">\n        <Container maxWidth='sm' >\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Paper>\n                <SetTime title={'Time Per Turn'} \n                        minutes={this.state.playerOneMinutes} \n                        seconds={this.state.playerOneSeconds}\n                        onChangeMinutes={this.updateGameTimeMinutes}\n                        onChangeSeconds={this.updateGameTimeSeconds}\n                        gameOn = {this.state.gameOn}\n                        />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper><Clock name={'Player 1'} \n                            minutes={this.state.playerOneMinutes}\n                            seconds={this.state.playerOneSeconds}\n                            startTurn={this.startTurn}\n                            disabledToggle = {this.state.disableOne}\n                            buttonText = {this.state.buttonText}\n                            buttonType = {this.state.buttonType}/>\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper><Clock name={'Player 2'} \n                            minutes={this.state.playerTwoMinutes}\n                            seconds={this.state.playerTwoSeconds}\n                            startTurn={this.startTurn}\n                            disabledToggle = {this.state.disableTwo}\n                            buttonText = {this.state.buttonText}\n                            buttonType = {this.state.buttonType}/>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n        </div>\n      );\n    }\n    else{\n    return(\n      <div className=\"App\">\n      <Container maxWidth='sm' >\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper>\n              <SetTime title={'Time Per Turn'} \n                       minutes={this.state.playerOneMinutes} \n                       seconds={this.state.playerOneSeconds}\n                       onChangeMinutes={this.updateGameTimeMinutes}\n                       onChangeSeconds={this.updateGameTimeSeconds}\n                       />\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper><Clock name={'Player 1'} \n                          minutes={this.state.playerOneMinutes}\n                          seconds={this.state.playerOneSeconds}\n                          startTurn={this.startTurn}\n                          disabledToggle = {this.state.disableOne}\n                          buttonText = {this.state.buttonText}\n                          buttonType = {this.state.buttonType}/>\n            </Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper><Clock name={'Player 2'} \n                          minutes={this.state.playerTwoMinutes}\n                          seconds={this.state.playerTwoSeconds}\n                          startTurn={this.startTurn}\n                          disabledToggle = {this.state.disableTwo}\n                          buttonText = {this.state.buttonText}\n                          buttonType = {this.state.buttonType}/>\n            </Paper>\n          </Grid>\n          <Grid item xs={12}>\n            <Paper>\n              <Box p={1}>\n              {this.state.turn} is out of time.\n              </Box>\n              <Box p={1}>\n              <Button variant=\"contained\" color=\"secondary\" onClick={this.reset}>Reset</Button>\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n      </div>\n    );\n    \n  }\n  }\n\n}\n\n\nclass Clock extends React.Component{\n  \n  render(){\n    return(\n      <div className='Clock'>\n      <Typography variant=\"h6\">\n        {this.props.name}\n      </Typography>\n      <Box p={1}>\n        <div>\n          Time Remaining: {this.props.minutes}:{(\"0\" + this.props.seconds).slice (-2) }\n        </div>\n      </Box>\n      <Box p={1}>\n        <Button variant=\"contained\" \n                color={this.props.buttonType} \n                className='Start' \n                onClick={() => this.props.startTurn(this.props.name)}\n                disabled = {this.props.disabledToggle}>\n                {this.props.buttonText}\n                \n                </Button>\n      </Box>\n    </div>\n    )\n  }\n}\n\n\nfunction SetTime(props){\n return(\n  <div className='SetTime'>\n    <Typography variant=\"h4\" component=\"h2\">\n      {props.title}\n    </Typography>\n\n    <Typography variant=\"h5\" component=\"h2\">\n\n      <Box p={2}>\n        <Input className='SetTimeInputMinutes' \n               type='number'\n               placeholder={props.minutes.toString()}\n               onChange = {props.onChangeMinutes}\n               disabled={props.gameOn}\n               inputProps={{ min: \"0\", step: \"1\" }}/> Minutes\n      </Box>\n\n      <Box p={2}>\n        <Input className='SetTimeInputSeconds' \n               type='number' \n               placeholder={props.seconds.toString()}\n               onChange={props.onChangeSeconds}\n               disabled={props.gameOn}\n               inputProps={{ min: \"0\", max: \"59\", step: \"1\" }}/> Seconds\n      </Box>\n\n    </Typography>\n\n  </div>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}